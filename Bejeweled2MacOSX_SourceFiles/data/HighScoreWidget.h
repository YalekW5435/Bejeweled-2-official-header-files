#ifndef __HIGHSCOREWIDGET_H__#define __HIGHSCOREWIDGET_H__#include "../SexyAppFramework/Widget.h"#include "../SexyAppFramework/ButtonListener.h"#include "CurvedVal.h"namespace Sexy{class WinDMApp;class HyperlinkWidget;class DDImage;class PodButton;const int NUM_HIGHSCORE_PLACES = 10;const int NUM_HIGHSCORE_SECTIONS = 9;class HighScoreWidget : public Widget, public ButtonListener{	public:	enum	{		STATE_OPENING,		STATE_CLOSING	};public:	WinDMApp*				mApp;	int						mOffset;	PodButton*				mBackButton;	PodButton*				mPlayAgainButton;		int						mShowDelay;	CurvedVal				mSidesOffset;	CurvedVal				mButtonsOffset;	CurvedVal				mHeaderOffset;	CurvedVal				mBottomOffset;	std::string				mRank;	std::string				mNames[NUM_HIGHSCORE_SECTIONS][NUM_HIGHSCORE_PLACES];	int						mScores[NUM_HIGHSCORE_SECTIONS][NUM_HIGHSCORE_PLACES];		int						mNewScoreIdx[NUM_HIGHSCORE_SECTIONS];	int						mHue;	int						mState;		bool					mHasGameStats;	bool					mShowingGameStats;			int						mNewHiliteCount;protected:	int						GetDayNum();	void					ReadFromFile();	void					WriteToFile();		void					ProcessScoreStuff();	std::string				GetOrderSuffix(int theNum);	int						GetScorePlace(int theGameIdx, int theScore);	void					DrawShadowString(Graphics* g, const std::string& theString, int theX, int theY);public:	HighScoreWidget(WinDMApp* theApp);	virtual ~HighScoreWidget();	void					ResetHighScores();	virtual void			AddedToManager(WidgetManager* theWidgetManager);	virtual void			RemovedFromManager(WidgetManager* theWidgetManager);	virtual void			Draw(Graphics* g);	virtual void			Update();	virtual void			Resize(int theX, int theY, int theWidth, int theHeight);		virtual void			Registered();	virtual void			NameEntered(const std::string& theName);	virtual void			ButtonPress(int theId);	virtual void			ButtonDepress(int theId);};}#endif //__HIGHSCOREWIDGET_H__