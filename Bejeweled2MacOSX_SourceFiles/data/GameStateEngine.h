#ifndef __GAMESTATEENGINE_H__#define __GAMESTATEENGINE_H__#include "BaseStateEngine.h"#include "../SexyAppFramework/MTRand.h"enum{	EVENT_BOARD_INIT, // Board initialized	EVENT_NEW_BOARD, // Put pieces on board	EVENT_SWAP,	NUM_EVENTS};namespace Sexy{const int	GSNUM_GEM_TYPES = 7;const int	GSNUM_ROWS = 8;const int	GSNUM_COLS = 8;enum{	GSTYPE_GEM_1 = 0,	GSTYPE_GEM_LAST = GSNUM_GEM_TYPES-1,		GSTYPE_BOMB,	GSTYPE_ROCK,	GSTYPE_WILDCARD_DESTROYER,	GSNUM_TYPES};#define GSLAST_MATCHABLE_TYPE GSTYPE_GEM_LASTclass GSPiece {public:	bool mBombified;	int mBombifyTick;	bool mShrinking;	int mType;	int mBombCountdown;	int mLastActiveTick;	public:	GSPiece();};class GameStateEngine : public Sexy::BaseStateEngine{protected:	MTRand					mRand;	GSPiece*				mBoard[GSNUM_ROWS][GSNUM_COLS];	int						mUpdateCnt; // NOT synchronized with game	bool					mPuzzleMode;	bool					mTimedMode;	int						mLevel;	int						mChainCount;public:	double					mBombChance;	int						mBombCountdown;	double					mRockChance;	double					mPowerGemChance;protected:	bool					FindMove(int* theCoords, int theMoveNum, bool horz, bool vert);	bool					HasSet();	void					DoneClearing();	void					DoNewBoard();	bool					IsBoardClear();	void					ClearPieceType(int theType);	void					ExplodeAt(int theCol, int theRow);	bool					UpdateBombs();	void					UpdateBoard();	public: // Overridables		virtual void			ParseEvent(int theEventType);	virtual std::string		GetPrintableState();	virtual ulong			GetStateHash();public:	void					BoardInit(int theSeed, bool puzzleMode);	void					NewBoard();	void					Swap(int theFirstCol, int theFirstRow, int theSecondCol, int theSecondRow);	public:	GameStateEngine();	virtual ~GameStateEngine();};}#endif //__GAMESTATEENGINE_H__