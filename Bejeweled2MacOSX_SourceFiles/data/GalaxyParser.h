#ifndef __GALAXYPARSER_H__#define __GALAXYPARSER_H__#define DEFAULT_GALAXY "Galaxy One"#include "../SexyAppFramework/Common.h"#include "../SexyAppFramework/Buffer.h"#include "../SexyAppFramework/Point.h"namespace Sexy{class XMLParser;class Moon{public:	std::string				mFileName;		std::string				mMoonName;	std::string				mDisabledImageName;	std::string				mSolvedImageName;	std::string				mUnsolvedImageName;};typedef std::vector<Moon> MoonVector;typedef std::vector<std::string> StringVector;typedef std::vector<IntPoint> PointVector;class Planet{public:	std::string				mPlanetName;	std::string				mDescription;	int						mMapX;	int						mMapY;	std::string				mBkgImageName;	std::string				mAvailableImageName;	std::string				mDisabledImageName;	MoonVector				mMoonVector;	std::string				mTutorialPuzzleFile;	StringVector			mTutorialText;	PointVector				mTutorialMoves;};typedef std::vector<Planet> PlanetVector;class GalaxyParser{public:	XMLParser*				mXMLParser;	bool					mHasFailed;	std::string				mError;	PlanetVector			mPlanetVector;	std::string				mGalaxyName;	std::string				mMapImageName;protected:			bool					ParseEnd();	bool					ParseSingleElement(std::string* aString);	bool					ParseTutorial(Planet* thePlanet);	bool					ParsePlanet(Planet* thePlanet);	bool					ParseGalaxy();	bool					DoParse();public:	GalaxyParser();	virtual ~GalaxyParser();	bool					ParseBuffer(const Buffer& theBuffer);	std::string				GetErrorText();	void					Fail(const std::string& theErrorText);	Moon*					GetMoon(int theMoonNum);};}#endif //__GALAXYPARSER_H__