#ifndef __WINDMAPP_H__#define __WINDMAPP_H__//#define BETA//#define DEBUGKEYS#pragma warning(disable:4005)#include "ThreadingHelpers.h"#include "Resources.h"#include "../SexyAppFramework/SexyApp.h"#include "../SexyAppFramework/ButtonListener.h"#include "../SexyAppFramework/Rect.h"#define NUM_PLANET_MOONS 5#define S(num) (((WinDMApp*) gSexyApp)->ScaleNum(num))#define SU(num) (((WinDMApp*) gSexyApp)->ScaleNumUp(num))#define SA(num, add) (((WinDMApp*) gSexyApp)->ScaleNum(num, add))#define SUA(num, add) (((WinDMApp*) gSexyApp)->ScaleNumUp(num, add))namespace Sexy{enum{	MODE_CLASSIC,	MODE_TIMED,	MODE_PUZZLE,	MODE_ENDLESS,	MODE_TWILIGHT,	MODE_TIMED_SECRET,	MODE_PUZZLE_SECRET,	MODE_ENDLESS_SECRET,	MODE_ORIGINAL,    MODE_MAX            // how many are in enum};class MemoryImage;class ImageFont;class Board;class TitleScreen;class FancyBackdrop;class Dialog;class ButtonWidget;class HighScoreWidget;class BassMusicInterface;class BackdropsParser;class MainMenu;class GalaxyParser;class Profile;class WorkerThread;class ReloadDisplay;const int	NUM_GEM_TYPES = 7;const int	NUM_SHRUNKEN_GEMS = 6;const int	GEM_WIDTH = 84;const int	GEM_HEIGHT = 84;const int	NUM_DIGIT_FADES = 6;const int	NUM_TIMER_BARS = 25;const int	MAX_BACKDROPS = 50;enum{		DIALOG_NEW_GAME,	DIALOG_QUIT,	DIALOG_OPTIONS,	DIALOG_OPTION_VERIFY,	DIALOG_NORMAL_MODE,	DIALOG_TIMED_MODE,	DIALOG_REGISTER,	DIALOG_REGISTER_ERROR,	DIALOG_TRIAL_EXPIRED,	DIALOG_REGISTER_NAG,	DIALOG_RECORD_SCORE,		DIALOG_OPENURL_WAIT,	DIALOG_OPENURL_FAIL,		DIALOG_FULL_INSTRUCTIONS,	DIALOG_HIGH_SCORES,	DIALOG_COLOR_DEPTH_EXPLINATION,	DIALOG_PREGAME_NAG,	DIALOG_LOAD_GAME,	DIALOG_CONFIRM_UPDATE_CHECK,	DIALOG_CHECKING_UPDATES,	DIALOG_ANNOUNCE,	DIALOG_ALREADY_REGISTERED,	DIALOG_PUZZLE_UNDO,		DIALOG_PUZZLE_CONFIRM_HINT,	DIALOG_PUZZLE_HINT,	DIALOG_PUZZLE_END_HINT,		DIALOG_HINT_TIMER,	DIALOG_CREATE_USER,	DIALOG_DELETE_USER,	DIALOG_RENAME_USER,	DIALOG_CONFIRM_DELETE_USER,	DIALOG_MORE_GAMES,		DIALOG_USERS,	DIALOG_RESET_HIGH_SCORES,	DIALOG_PUZZLE_PACK_SELECTOR,	DIALOG_RATE_PUZZLE,	DIALOG_WELCOME,		DIALOG_INSTRUCTION,			DIALOG_PIECE_HINT_POWER_GEM,	DIALOG_PIECE_HINT_HYPER_CUBE,	DIALOG_HELP_SCREEN,	DIALOG_ENTER_NAME};#define FIRST_NON_VIS_BLOCKING_DIALOG DIALOG_INSTRUCTION/*#define MUSICOFFSET_MAIN			0x02#define MUSICOFFSET_HIGH_SCORES		0x5D#define MUSICOFFSET_MAIN_MENU		0x90#define MUSICOFFSET_GET_READY		0x9F//#define MUSICOFFSET_PUZZLE_CLEAR	0x70#define MUSICOFFSET_PUZZLE			0x02#define MUSICOFFSET_LOADING			0xA3*/typedef std::vector<std::string> StringVector;typedef std::set<std::string> StringSet;typedef std::list<ButtonWidget*> ButtonList;class Backdrop{public:	Color					mUIColorize;	Color					mGemColorize;	public:	Backdrop()	{		mUIColorize = Color(255, 255, 255);		mGemColorize = Color(255, 255, 255);	}};#define NUM_BOMBIFIED_FRAMES 10class PuzzleRating{public:	ushort					mPuzzleNum;	uchar					mRating;	ushort					mSecondsSpent;	ushort					mHintsUsed;};typedef std::vector<PuzzleRating> PuzzleRatingVector;class WinDMApp : public SexyApp{public:			int						mOrigScreenWidth;	int						mOrigScreenHeight;	bool					mPreWasWindowed;	int						mGamesPlayed;	int						mFramesPlayed;		bool					mNoMorePlay;	int						mGameMode;	bool					mFirstPuzzleGame;	bool					mHasClearedInitialMainMenu;	StringVector			mBackdropList;	StringVector			mPuzzlePackList;	PuzzleRatingVector		mPuzzleRatingVector;	int						mNormBonus;	double					mNormBonusMult;	double					mNormPMBase;	double					mNormPMMult;	int						mEndlessBonus;	double					mEndlessBonusMult;	double					mEndlessPMBase;	int						mTimedBonus;	double					mTimedBonusMult;	double					mTimedBonusAccel;	double					mTimedPMBase;	double					mTimedPMMult;	double					mTimedPVBase;	double					mTimedPVMult;	double					mTimedPABase;	double					mTimedPAMult;	double					mGraceSeconds;	double					mGraceSecondsMult;	double					mGraceSecondsMax;	BackdropsParser*		mBackdropsParser;	Backdrop				mBackdrops[MAX_BACKDROPS];	int						mMainMusicChannel;	int						mModeSeconds[4];		Board*					mBoard;	GalaxyParser*			mGalaxyParser;	WorkerThread*			mWorkerThread;	Profile*				mProfile;		TitleScreen*			mTitleScreen;		FancyBackdrop*			mFancyBackdrop;	MainMenu*				mMainMenu;	bool					mNeedReload;	Image***				mShrunkenGems;			HighScoreWidget*		mHighScoreWidget;	std::string				mLastScoreName;		bool					mHighResolution;	bool					mAlwaysUpdate;	bool					mHas3dImages;			ButtonList				mControlButtonList;				Image*					mTimerBars[NUM_TIMER_BARS];	MemoryImage*			mBombifiedStillStrip;		bool					mFirstMove;	bool					mNoPopLink;	bool					mIsDiamondMine;			bool					mDoingSilentUpdateCheck;	bool					mWasPlayingBeforeReload;	ReloadDisplay*			mReloadDisplay;	CSimpleThread*			mReloadingThreadHandle;		int						mNextMusicPos;	int						mNextMusicDelay;#ifdef TRYMEDIA	bool					mActiveMARKisLicenseExpired;	int						mActiveMARKusesRemaining;#endifpublic:	virtual void			LoadingThreadProc();	virtual void			WriteToRegistry();	virtual void			ReadFromRegistry();		virtual void			UpdateFrames();	virtual void			SetMusicVolume(double theVolume);			void					DestroyReloadableResources();	void					ReloadThreadProc();	static void				ReloadThreadProcStub(void* theArg);	void					DoReloading(bool wantWindowed, bool is3d);	void					DoneReloading();	void					MakeShrunkenGems();		void					DoGameOver();	void					DoOptions();	void					FinishOptionsDialog(bool allowSwitch);	void					DoNewGame();	void					DoBoardShow();	void					NewGame();	void					KillBoard();		void					KillTitleScreen();	ButtonWidget* 			CreateControlButton(int theId, const IntRect& theRect, int theDownImage, int theOverImage);	void					ConfirmNewGame();	void					ConfirmNormalMode();	void					ConfirmTimedMode();	void					ConfirmResetHighScores();	void					ConfirmQuit();	void					TryConfirmLoad();	void					ConfirmCheckForUpdates();	void					CheckForUpdates(bool silent);	void					LoadingCompleted();	void					DoNoMorePlayDialog();	void					DoRegister();	void					DoRegisterError();	void					DoRegisterScoreNag(const std::string& theString);	void					DoRecordScoreDialog(const std::string& theString);	void					DoInstructionDialogette();	void					DoFullInstructions();	void					DoHighScoreDialog();		void					DoColorDepthExplination();	Dialog*					DoAnnounceDialog();	void					FinishAnnounceDialog(bool result);	void					DoPregameNag();					void					DoUserDialog();	void					FinishUserDialog(bool isYes);	void					DoCreateUserDialog();	void					FinishCreateUserDialog(bool isYes);	void					DoConfirmDeleteUserDialog(const std::string& theUserName);		void					FinishConfirmDeleteUserDialog(bool isYes);	void					DoRenameUserDialog(const std::string& theUserName);	void					FinishRenameUserDialog(bool isYes);	void					DoPuzzlePackSelector();	void					FinishPuzzlePackSelector(bool isYes);	void					DoPuzzleRatingDialog();	void					FinishPuzzleRatingDialog(bool isYes);	void					DoHelpScreen();	void					FinishHelpScreen(bool dontShowAgain);	void					DoMoreGames();		bool					DebugKeyDown(int theKey);	void					BuildBackdropList();	void					ValidatePuzzlePackSelection();	void					LoadGalaxyData();	void					BuildPuzzlePackList();public:	WinDMApp();	virtual ~WinDMApp();	virtual void			SwitchScreenMode(bool wantWindowed);	virtual void			SwitchScreenMode(bool wantWindowed, bool is3d);	virtual void			MakeWindow();	virtual void			PreDisplayHook();	virtual void			Done3dTesting();		virtual void			Init();		virtual void			PlaySample(int theSoundNum);	virtual void			PlaySample(int theSoundNum, int thePan);	virtual void			ButtonPress(int theId);	virtual void			ButtonDepress(int theId);	virtual void			LoadingThreadCompleted();	virtual void			URLOpenFailed(const std::string& theURL);	virtual void			URLOpenSucceeded(const std::string& theURL);	virtual bool			OpenURL(const std::string& theURL, bool shutdownOnOpen = false);	virtual void			Shutdown();	virtual std::string		GetGameSEHInfo();	virtual void			DoHighScoreWidget();	virtual void			KillHighScoreWidget();		void					DoMainMenu();	void					KillMainMenu();	void					ClearInitialMainMenu();	void					SetupDialog(Dialog* theDialog, int theWidth);	virtual void			AddDialog(int theDialogId, Dialog* theDialog);	virtual Dialog*			NewDialog(int theDialogId, bool isModal, const std::string& theDialogHeader, const std::string& theDialogLines, const std::string& theDialogFooter, int theButtonMode);	virtual Dialog* 		DoDialog(int theDialogId, bool isModal, const std::string& theDialogHeader, const std::string& theDialogLines, const std::string& theDialogFooter, int theButtonMode);	virtual bool			KillDialog(int theDialogId);		virtual void			ModalOpen();	virtual void			ModalClose();	virtual void			GotFocus();	virtual void			LostFocus();		void					GenerateBombifiedStillStrip();			double					ScaleNum(double theNum, double theAdd = 0.0);	float					ScaleNum(float theNum, float theAdd = 0.0f);	int						ScaleNum(int theNum, int theAdd = 0);		int						ScaleNumUp(int theNum, int theAdd = 0);};}#endif //__WINDMAPP_H__